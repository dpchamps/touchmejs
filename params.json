{"name":"Touchmejs","tagline":"Simple touch events with the option to fall back on to mouse events.","body":"# touchmeJS\r\n\r\n## About\r\n\r\nA simple javascript library for adding touch events to your app, provides mouse fallback for greater ease.\r\n\r\n## [Demo](/demo/index.html)\r\n\r\n\r\n\r\n## Usage\r\n\r\n#### In the Browser:\r\n\r\n    <script src='touchme.js'></script>`\r\n\r\n#### CommonJS\r\n\r\n    require('/touchme');`\r\n\r\n\r\n#### Instantiating\r\n\r\n```javascript\r\ntouchme(args); //returns true if on touch device, false otherwise\r\n```\r\n\r\n##### where args is an object to override default arguments, the defaults are as follows:\r\n    {\r\n        swipeThreshold: 80,    //the minimun distance required for a 'swipe' event to fire\r\n        tapThreshold: 200,     //the time in milleseconds to wait for a dbltap\r\n        holdThreshold: 550,    //the time in milliseconds required for a 'hold' event to fire\r\n        precision: 45,         //the boundary for all tap events\r\n        onlyTouch: false,      //when set to true, events only fire on touch device\r\n        swipeOnlyTouch: false, //when set to true, swipe events only fire on touch device,\r\n        nTap: false            //still experimental, if the users clicks >=3 taps within tap threshold, nTap is fired containing how many taps occured.\r\n    }\r\n___\r\n\r\n### tap\r\n\r\n+ el.addEventListener('tap', doSomething(data));\r\n   + data contents:\r\n      + `.x`, `.y` - position where event occurred\r\n\r\n### dbltap\r\n\r\n+ el.addEventListener('dbltap', doSomething(data));\r\n   + data contents:\r\n      + `.x`, `.y` - position where event occurred\r\n\r\n### swiperight\r\n\r\n+ el.addEventListener('swiperight', doSomething(data));\r\n   + data contents:\r\n      + `.x`, `.y` - position where event occurred\r\n      + `.direction.radians`, `.direction.degrees` - direction in radians or degrees\r\n      + `.distance.x`, `.distance.y` - distance in pixels\r\n\r\n### swipeleft\r\n\r\n+ el.addEventListener('swipeleft', doSomething(data));\r\n   + data contents:\r\n      + `.x`, `.y` - position where event occurred\r\n      + `.direction.radians`, `.direction.degrees` - direction in radians or degrees\r\n      + `.distance.x`, `.distance.y` - distance in pixels\r\n\r\n### swipeup\r\n\r\n+ el.addEventListener('swipeup', doSomething(data));\r\n   + data contents:\r\n      + `.x`, `.y` - position where event occurred\r\n      + `.direction.radians`, `.direction.degrees` - direction in radians or degrees\r\n      + `.distance.x`, `.distance.y` - distance in pixels\r\n\r\n### swipedown\r\n\r\n+ el.addEventListener('swipedown', doSomething(data));\r\n   + data contents:\r\n      + `.x`, `.y` - position where event occurred\r\n      + `.direction.radians`, `.direction.degrees` - direction in radians or degrees\r\n      + `.distance.x`, `.distance.y` - distance in pixels\r\n\r\n### hold\r\n\r\n+ el.addEventListener('hold', doSomething(data));\r\n   + data contents:\r\n      + `.x`, `.y` - position where event occurred\r\n      + `.holdElement` - the element that's being held.\r\n\r\n### holdrelease\r\n\r\n+ el.addEventListener('holdrelease', doSomething(data));\r\n   + data contents:\r\n      + `.x`, `.y` - position where event occurred\r\n      + `.holdElement` - the element that's being released.\r\n      + `.originalX`, `.originalY` the original coordinates of the element being released.\r\n\r\n\r\n##Coming soon\r\n\r\n### AMD support?\r\n### tests\r\n### cleaned up file structure","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}